from OpenGL.GL import *
from OpenGL.GLU import *

def draw_sphere(radius):
    """
        Рисует сферу с заданным радиусом в трехмерном пространстве.

        Ключевые аргументы:
        radius (float): Радиус сферы, которую нужно нарисовать.

        Описание:
        Функция draw_sphere использует библиотеку OpenGL для рисования сферы с заданным радиусом
        в трехмерном пространстве. Внутри функции устанавливаются значения для переменных slices и stacks,
        которые определяют количество сегментов и стеков сферы соответственно. Затем устанавливается цвет
        для сферы с помощью функции glColor3f, и сфера рисуется с помощью функции gluSphere.

    """
    slices = 100
    stacks = 100
    glColor3f(0.0, 0.0, 0.0)
    gluSphere(gluNewQuadric(), radius, slices, stacks)

def draw_tetrahedron():
    """
          Рисует тетраэдр в трехмерном пространстве.

          Описание: Функция draw_tetrahedron использует библиотеку OpenGL для рисования тетраэдра в трехмерном пространстве.
          Внутри функции используется блок glBegin(GL_TRIANGLES), который указывает на начало рисования треугольников.
          Затем устанавливается цвет для тетраэдра с помощью функции glColor3f, и рисуются вершины тетраэдра с помощью функции
          glVertex3f. После рисования всех вершин тетраэдра, рисование завершается с помощью функции glEnd().
    """
    glBegin(GL_TRIANGLES)
    glColor3f(1.0, 0.75, 0.8)
    glVertex3f(0.0, 1.5, 0.0)
    glVertex3f(-1.0, -1.0, 1.0)
    glVertex3f(1.0, -1.0, 1.0)

    glVertex3f(0.0, 1.5, 0.0)
    glVertex3f(1.0, -1.0, 1.0)
    glVertex3f(1.0, -1.0, -1.0)

    glVertex3f(0.0, 1.5, 0.0)
    glVertex3f(1.0, -1.0, -1.0)
    glVertex3f(-1.0, -1.0, -1.0)

    glVertex3f(0.0, 1.5, 0.0)
    glVertex3f(-1.0, -1.0, -1.0)
    glVertex3f(-1.0, -1.0, 1.0)

    glVertex3f(-1.0, -1.0, 1.0)
    glVertex3f(1.0, -1.0, 1.0)
    glVertex3f(1.0, -1.0, -1.0)

    glVertex3f(-1.0, -1.0, 1.0)
    glVertex3f(1.0, -1.0, -1.0)
    glVertex3f(-1.0, -1.0, -1.0)
    glEnd()


